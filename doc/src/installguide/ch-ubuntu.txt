== Ubuntu

=== Supported Releases

This chapter provides additional information for installing @OMNETPP@ on
Ubuntu Linux installations. The overall installation procedure is described
in the 'Linux' chapter.

The following Ubuntu releases are covered:

* Ubuntu 18.04LTS or 20.04LTS

They were tested on the following architectures:

* Intel 64-bit

The instructions below assume that you use the default desktop and the bash shell.
If you use another desktop environment or shell, you may need to adjust the
instructions accordingly.


=== Opening a Terminal

Type 'terminal' in Dash and click on the Terminal icon.

=== Installing the Prerequisite Packages

You can perform the installation using the graphical user interface or
from the terminal, whichever you prefer.

==== Command-Line Installation

Before starting the installation, refresh the database of available packages.
Type in the terminal:

  $ sudo apt-get update

To install the required packages, type in the terminal:

  $ sudo apt-get install build-essential clang lld bison flex perl \
       python python3 qt5-default libqt5opengl5-dev tcl-dev tk-dev \
       libxml2-dev zlib1g-dev doxygen graphviz libwebkit2gtk-4.0-37

To use Qtenv with 3D visualization support, install the development packages
for OpenSceneGraph (3.2 or later) and the osgEarth (2.7 or later) packages. (You
may need to enable the 'Universe' software repository in Software Sources. 

  $ sudo apt-get install openscenegraph-plugin-osgearth libosgearth-dev

[NOTE]
=====================================================
You may opt to use gcc and g++ instead of the clang and clang++ compilers. If you
do not need the 3D visualization capabilities, you can disable them in the
'configure.user' file.
=====================================================

To enable the optional parallel simulation support you will need to install the MPI packages:

  $ sudo apt-get install openmpi-bin libopenmpi-dev

At the confirmation questions ('Do you want to continue? [Y/N]'), answer 'Y'.

image::pictures/terminal-package-install.png[title="Command-Line Package Installation",align="center",scaledwidth="75%"]

==== Graphical Installation

Open the dash and type 'Synaptic'.

Since software installation requires root permissions, Synaptic will ask you
to type your password.

Search for the following packages in the list, click the squares before the names,
then choose 'Mark for installation' or 'Mark for upgrade'.

If the 'Mark additional required changes?' dialog comes up, choose the 'Mark' button.

The packages:

* required: build-essential, clang, ldd, bison, flex, perl, qt5-default,
  tcl-dev, tk-dev, libxml2-dev, zlib1g-dev, doxygen, graphviz, libwebkit2gtk-4.0-37
* recommended: libopenscenegraph-dev, openscenegraph-plugin-osgearth, libosgearth-dev,
  openmpi-bin, libopenmpi-dev

image::pictures/ubuntu-synaptic.png[title="Synaptic Package Manager",align="center",scaledwidth="75%"]

Click 'Apply', then in the 'Apply the following changes?' window, click 'Apply' again.
In the 'Changes applied' window, click 'Close'.


==== Post-Installation Steps

===== Setting Up Debugging

By default, Ubuntu does not allow ptracing of non-child processes by non-root users. That is,
if you want to be able to debug simulation processes by attaching to them with a debugger,
or similar, you want to be able to use @OMNETPP@ just-in-time debugging
(`debugger-attach-on-startup` and `debugger-attach-on-error` configuration options),
you need to explicitly enable them.

To temporarily allow ptracing non-child processes, enter the following command:

  $ echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope

To permanently allow it, edit `/etc/sysctl.d/10-ptrace.conf` and change the line:

  kernel.yama.ptrace_scope = 1

to read

  kernel.yama.ptrace_scope = 0

Note that the default debugger for @OMNETPP@ just-in-time debugging is 'Nemiver',
so it also needs to be installed:

  $ sudo apt-get install nemiver
