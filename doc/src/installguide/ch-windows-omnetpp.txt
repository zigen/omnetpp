== Windows

=== Supported Windows Versions

@OMNETPP@ supports 64-bit versions of Windows.

[NOTE]
===============================================================
32-bit Windows versions are no longer supported. If you need 32-bit
builds on Windows, we recommend using @OMNETPP@ 5.0
===============================================================

=== Installing @OMNETPP@

Download the @OMNETPP@ source code from http://omnetpp.org. Make sure
you select the Windows-specific archive, named
`@omnetpp@-@version@-windows-x86_64.zip`.

The package is self-contained: in addition to @OMNETPP@ files
it includes a C++ compiler, a command-line build environment, and all
libraries and programs required by @OMNETPP@.

Copy the @OMNETPP@ archive to the directory where you want to install it.
Choose a directory whose full path *does not contain any space*; for example,
do not put @OMNETPP@ under 'Program Files'.

Extract the zip file. To do so, right-click the zip file in Windows Explorer,
and select 'Extract All' from the menu. You can also use external programs
like Winzip or 7zip.

When you look into the new `@omnetpp@-@version@` directory, should see
directories named `doc`, `images`, `include`, `tools`, etc., and files named
`mingwenv.cmd`, `configure`, `Makefile`, and others.


=== Configuring and Building @OMNETPP@

Start `mingwenv.cmd` in the `@omnetpp@-@version@` directory by double-clicking
it in Windows Explorer. It will bring up a console with the MSYS 'bash' shell,
where the path is already set to include the `@omnetpp@-@version@/bin` directory.
On the first start of the shell, you may need to wait for the extraction of
the `tools` directory.

NOTE: If you want to start simulations from outside the shell as well
(for example from Explorer), you need to add @OMNETPP@'s `bin` directory and also
the `bin` directories in the tools folder to the path; instructions are provided later.

First, check the contents of the `configure.user` file to make sure
it contains the settings you need. In most cases you don't need to change anything.

    notepad configure.user

Then enter the following commands:

    $ ./configure
    $ make

The build process will create both debug and release binaries.


=== Verifying the Installation

You should now test all samples and check they run correctly. As an example,
the 'aloha' example is started by entering the following commands:

    $ cd samples/aloha
    $ ./aloha

By default, the samples will run using the graphical Qtenv environment.
You should see GUI windows and dialogs.


=== Starting the IDE

@OMNETPP@ comes with an Eclipse-based Simulation IDE. You should be able
to start the IDE by typing:

    $ @omnetpp@

We recommend that you start the IDE from the command-line.
Yo can also create a shortcut for starting the IDE. To do so, locate
the `omnetpp.exe` program in the `@omnetpp@-@version@/ide` directory in Windows
Explorer, right-click it, and choose 'Send To > Desktop (create shortcut)' from
the menu. On Windows 7, you can right-click the taskbar icon while the IDE is running,
and select 'Pin this program to taskbar' from the context menu.


=== Environment Variables

If you want to start @OMNETPP@ simulations outside the shell as well
(for example from Exlorer), you need to add @OMNETPP@'s `bin`,
`tools/win64/usr/bin` and `tools/win64/mingw64/bin` directories
to the path.

First, open the 'Environment Variables' dialog.

Click the Start button, then start typing `environment variables`
into the search box. Choose 'Edit environment variables for your account' when it
appears in the list. The  dialog comes up.

In the dialog, select `path` or `PATH` in the list, click 'Edit'. Append
"`;<omnetpp-dir>\bin`" and the other needed directories to the value (without quotes),
where `<omnetpp-dir>` is the name of the @OMNETPP@ root directory
(for example `C:\@omnetpp@-@version@`).
Hit Enter to accept.

You need to log-out and then log-in for the changes to take effect.


=== Reconfiguring the Libraries

If you need to recompile the @OMNETPP@ components with different flags (e.g.
different optimization), then change the top-level @OMNETPP@ directory, edit
`configure.user` accordingly, then type:

    $ ./configure
    $ make clean
    $ make

If you want to recompile just a single library, then change to the directory
of the library (e.g. `cd src/sim`) and type:

    $ make clean
    $ make

By default, libraries are compiled in both debug and release mode. If you want
to make release or debug builds only, use:

    $ make MODE=release

or

    $ make MODE=debug

By default, shared libraries will be created. If you want to build static
libraries, set `SHARED_LIBS=no` in `configure.user` and re-configure your
project.

NOTE: The built libraries and programs are immediately copied
to the `lib/` and `bin/` subdirs.


=== Portability Issues

@OMNETPP@ has been tested with both the gcc and the clang compiler from
the MinGW-w64 package.


=== Additional Packages

Note that Doxygen and GraphViz are already included in the @OMNETPP@ package,
and do not need to be downloaded.

==== MPI

MPI is only needed if you would like to run parallel simulations.

There are several MPI implementations for Windows, and @OMNETPP@ does not
mandate any specific one. We recommend DeinoMPI, which can be downloaded
from http://mpi.deino.net.

After installing DeinoMPI, adjust the `MPI_DIR` setting in @OMNETPP@'s
`configure.user`, and reconfigure and recompile @OMNETPP@:

    $ ./configure
    $ make cleanall
    $ make

NOTE: In general, if you would like to run parallel simulations, we recommend
that you use Linux, macOS, or another unix-like platform.

==== Akaroa

Akaroa 2.7.9, which is the latest version at the time of writing, does not
support Windows. You may try to port it using the porting guide from the
Akaroa distribution.
