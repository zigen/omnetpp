#
# Do not edit this file -- it gets generated from Makefile.inc.in.
# Your changes will be lost the next time ./configure is run.
#
OMNETPP_PRODUCT = OMNeT++
OMNETPP_RELEASE = omnetpp-6.0
OMNETPP_VERSION = 6.0
OMNETPP_BUILDID = internal
OMNETPP_EDITION = Academic Public License -- NOT FOR COMMERCIAL USE

#
# Optional features (set to "yes" to enable the feature)
#
WITH_QTENV = no
WITH_OSG = no
WITH_OSGEARTH = no
WITH_NETBUILDER = yes
WITH_PARSIM = yes
WITH_SYSTEMC = no
WITH_TKENV = no
EMBED_TCL_CODE = yes

#
# SHARED_LIBS determines whether omnetpp is built as shared or static libs
# By default we use shared libs
#
ifeq ("$(SHARED_LIBS)","")
  SHARED_LIBS = no
endif

#
# Directories
#

# NOTE: it is important to evaluate the current path immediately in this file using :=
OMNETPP_ROOT := $(abspath $(dir $(lastword $(MAKEFILE_LIST))))
OMNETPP_IMAGE_PATH := ./bitmaps:./images:$(OMNETPP_ROOT)/images
OMNETPP_BIN_DIR = $(OMNETPP_ROOT)/bin
OMNETPP_INCL_DIR = $(OMNETPP_ROOT)/include
OMNETPP_LIB_DIR = $(OMNETPP_ROOT)/lib$(OUTPUT_PREFIX)
OMNETPP_OUT_DIR = $(OMNETPP_ROOT)/out$(OUTPUT_PREFIX)
OMNETPP_SRC_DIR = $(OMNETPP_ROOT)/src
OMNETPP_UTILS_DIR = $(OMNETPP_SRC_DIR)/utils
OMNETPP_TKENV_DIR = $(OMNETPP_SRC_DIR)/tkenv
OMNETPP_UI_DIR = $(OMNETPP_ROOT)/ui
OMNETPP_DOC_DIR = $(OMNETPP_ROOT)/doc
OMNETPP_SAMPLES_DIR = $(OMNETPP_ROOT)/samples
OMNETPP_TEST_DIR = $(OMNETPP_ROOT)/test

PLATFORM = macosx
# platform specific code
ifeq ($(PLATFORM),win32.x86_64)
  OMNETPP_TOOLS_DIR = $(OMNETPP_ROOT)/tools/win64
  OMNETPP_IMAGE_PATH := $(shell cygpath -p -m '$(OMNETPP_IMAGE_PATH)')
else ifeq ($(PLATFORM),win32.x86)
  OMNETPP_TOOLS_DIR = $(OMNETPP_ROOT)/tools/win32
  OMNETPP_IMAGE_PATH := $(shell cygpath -p -m '$(OMNETPP_IMAGE_PATH)')
else ifeq ($(PLATFORM),macosx)
  OMNETPP_TOOLS_DIR = $(OMNETPP_ROOT)/tools/macosx
else
  # Linux and other platforms do not have a tools directory
endif

#
# Configure MODE specific flags/suffixes
#
ifeq ($(MODE),release)
  CFLAGS=$(CFLAGS_RELEASE)
  D=
else
  # by default assume debug mode
  MODE=debug
  CFLAGS=$(CFLAGS_DEBUG)
  D=d
endif

# use statically built omnetpp if we are building the IDE native helper library
ifeq ($(BUILDING_UILIBS),yes)
  SHARED_LIBS=no
  OUTPUT_PREFIX=/ui
endif

#
# Configname determines where (in which subdirectory of out/)
# makemake-generated makefiles create object files and other
# build artifacts.
#
ifndef CONFIGNAME
  CONFIGNAME = $(TOOLCHAIN_NAME)-$(MODE)
endif

#
# Control verbosity. Specifiying V=1 will make the build output verbose. You can use:
# $(Q) to hide commands only in quiet mode
# $(qecho) to print out something only in quite mode
# $(vecho) to print out something only in verbose mode
#
ifeq ($(V),1)
  Q :=
  vecho = @echo
  qecho = @true
else
  Q := @
  vecho = @true
  qecho = @echo
endif

#
# tools, libraries and compiler flags detected by ./configure
#
PERL = perl
YACC = bison -y -Wno-yacc
LEX = flex
CC = x86_64-apple-darwin20.4-clang
CXX = x86_64-apple-darwin20.4-clang++-libc++
TOOLCHAIN_NAME = clang
DEFINES = -DTHREADED
CFLAGS_DEBUG = -g -Wall
# modification compared to the ./configre generated makefile: make sure that -march=native -mtune=native is NOT in cflags.
CFLAGS_RELEASE = -O3 -DNDEBUG=1
CFLAGS += -MMD -MP -Wno-deprecated-register -arch x86_64 $(DEFINES)
CXXFLAGS =
LDFLAG_LIBPATH = -L
LDFLAG_INCLUDE = -Wl,-u,
LDFLAG_LIB = -l
LDFLAG_IMPLIB = -Wl,--out-implib,
LDFLAGS = -arch x86_64 $(LDFLAG_LIBPATH)$(OMNETPP_LIB_DIR)
WHOLE_ARCHIVE_ON = -Wl,-all_load
WHOLE_ARCHIVE_OFF =
AS_NEEDED_ON =
AS_NEEDED_OFF =
PIC_FLAGS =
MSGC = opp_msgc
SMC = opp_smc
NEDTOOL = nedtool
AS = x86_64-apple-darwin20.4-as
AR = x86_64-apple-darwin20.4-ar cr
ARFLAG_OUT =
RANLIB = x86_64-apple-darwin20.4-ranlib
SHLIB_LD = x86_64-apple-darwin20.4-clang++-libc++ -shared
DLLTOOL = dlltool
STRIP = x86_64-apple-darwin20.4-strip
WISH =
MAKEDEPEND = opp_makedep -Y --objdirtree
LN = ln -sf
MKPATH = mkdir -p
SHLIB_POSTPROCESS = opp_shlib_postprocess
SWIG = swig
QMAKE =
MOC=
UIC=
RCC=

HAVE_DLOPEN = 1
#SYS_LIBS = -lstdc++
TK_CFLAGS =
TK_LIBS =
QT_CFLAGS =
QT_LIBS =
OSG_CFLAGS =
OSG_LIBS =
OSGEARTH_CFLAGS =
OSGEARTH_LIBS =
ZLIB_CFLAGS =
ZLIB_LIBS = -lz
MPI_CFLAGS =
MPI_LIBS =
PCAP_CFLAGS =
PCAP_LIBS = -lpcap
PTHREAD_CFLAGS =
PTHREAD_LIBS = -lpthread
XMLPARSER = libxml
XML_CFLAGS = -I/opt/osxcross/target/SDK/MacOSX11.3.sdk/usr/include/libxml2
XML_LIBS = -lxml2
DEFINES += -DXMLPARSER=$(XMLPARSER)
AKAROA_CFLAGS = -I/usr/local/akaroa/include
AKAROA_LIBS = -L/usr/local/akaroa/lib -lakaroa -lfl
JNILIBS_IF_POSSIBLE = jnilibs
JAVA_CFLAGS = -I$(OMNETPP_ROOT)/../tools/jdk-include  -I$(OMNETPP_ROOT)/../tools/jdk-include/darwin
JAVA_LIBS =

#
# platform specific library and executable prefixes and extensions
#
A_LIB_SUFFIX = .a
SO_LIB_SUFFIX = .dylib
DLL_LIB_SUFFIX = .dll
JNI_LIB_SUFFIX = .jnilib
EXE_SUFFIX =
LIB_PREFIX = lib
SHARED_LIB_SUFFIX = $(SO_LIB_SUFFIX)

#
# omnetpp and system libraries linked with the simulations
#
TKENV_LIBS = $(LDFLAG_INCLUDE)_tkenv_lib $(AS_NEEDED_OFF) -lopptkenv$D -loppenvir$D -lopplayout$D
QTENV_LIBS = $(LDFLAG_INCLUDE)_qtenv_lib $(AS_NEEDED_OFF) -loppqtenv$D -loppenvir$D -lopplayout$D
CMDENV_LIBS = $(LDFLAG_INCLUDE)_cmdenv_lib $(AS_NEEDED_OFF) -loppcmdenv$D -loppenvir$D
ALL_ENV_LIBS = $(CMDENV_LIBS)
KERNEL_LIBS = -loppsim$D
OPPMAIN_LIB = $(LDFLAG_LIB)oppmain$D

#
# flags and libraries required for Qtenv
#
ifeq ($(WITH_QTENV),yes)
  DEFINES += -DWITH_QTENV
  ifeq ($(WITH_OSG),yes)
    DEFINES += -DWITH_OSG
  endif
  ifeq ($(WITH_OSGEARTH),yes)
    DEFINES += -DWITH_OSGEARTH
  endif
  # libraries required for static linking
  ifneq ($(SHARED_LIBS),yes)
    QTENV_LIBS += $(QT_LIBS)
    ifeq ($(WITH_OSG),yes)
      QTENV_LIBS += $(OSG_LIBS)
      KERNEL_LIBS += -losg -lOpenThreads
    endif
    ifeq ($(WITH_OSGEARTH),yes)
      QTENV_LIBS += $(OSGEARTH_LIBS)
      KERNEL_LIBS += -losgEarth
    endif
    ifeq ($(PLATFORM),macosx)
      QTENV_LIBS += -framework Carbon
    endif
  endif
  ALL_ENV_LIBS += $(QTENV_LIBS)
endif

#
# flags and libraries required for Ttenv
#
ifeq ($(WITH_TKENV),yes)
  DEFINES += -DWITH_TKENV
  # libraries required for static linking
  ifneq ($(SHARED_LIBS),yes)
    TKENV_LIBS += $(TK_LIBS) $(ZLIB_LIBS)
    ifeq ($(PLATFORM),macosx)
      TKENV_LIBS += -framework Carbon
    endif
  endif
  ALL_ENV_LIBS += $(TKENV_LIBS)
endif

ifeq ($(WITH_PARSIM),yes)
  DEFINES += -DWITH_PARSIM
  # extra libs needed during static building
  ifneq ($(SHARED_LIBS),yes)
    KERNEL_LIBS += $(MPI_LIBS)
  endif
endif

ifeq ($(WITH_NETBUILDER),yes)
  DEFINES += -DWITH_NETBUILDER
endif

#
# toolchain specific flags and options
#
ifeq ($(TOOLCHAIN_NAME),clang-msabi)
  # this macro can be used to pass EXPORT macros to the compiler if omnet is built as shared library
  ifeq ($(SHARED_LIBS),yes)
    IMPORT_DEFINES = -DOMNETPPLIBS_IMPORT
    EXPORT_DEFINES = $(EXPORT_MACRO)
  endif
endif

#
# handle differences between shared and static lib builds
#
ifeq ($(SHARED_LIBS),yes)
  LIB_SUFFIX =  $(SHARED_LIB_SUFFIX)
else
  LIB_SUFFIX = $(A_LIB_SUFFIX)
  # extra libraries needed when statically linking (because of indirect dependencies)
  KERNEL_LIBS += -loppnedxml$D -loppcommon$D $(XML_LIBS)
endif
