#!/bin/bash
#
# create an OMNeT++ source distribution package
#
# in: what - whether to build "omnetpp" (default) or "omnest"
# in: BUILD_CORE_DISTRO, BUILD_LINUX_X86_64_DISTRO,
#     BUILD_WIN32_X86_64_DISTRO, BUILD_MACOSX_DISTRO
#     if "true", the repsective platform distro will be built
# in: Build identifier can be passed as BUILDID variable (optional)
# in: If BUILD_IDE=true (default) - it tries to build the native and java part of the IDE
# in: If BUILD_IDE_NATIVE=true (default) - it tries to build the native part of the IDE
# in: If BUILD_DOC=true (default) - it tries to build the documentation
# out: SOURCE_DISTRIBUTION_NAME contains the created archivename

TWEAKCONFIG="perl releng/tweakconfigfile.pl"
REGEXPREPLACE="perl -i -pe"

cd $(dirname $0)/..
OMNETPP_ROOT=$(pwd)

cp configure.user.dist configure.user

source ./setenv

if test -z "$what"; then
    export what="omnetpp"
fi

if test -z "$BUILD_DOC"; then
  BUILD_DOC="true"
fi

if test -z "$BUILD_IDE"; then
  BUILD_IDE="true"
fi

if test -z "$BUILD_IDE_NATIVE"; then
  BUILD_IDE_NATIVE="true"
fi

export BUILD_CORE_DISTRO
export BUILD_LINUX_X86_64_DISTRO
export BUILD_WIN32_X86_64_DISTRO
export BUILD_MACOSX_DISTRO

if test -z "$TOOLS_DIR"; then
  export TOOLS_DIR=$HOME/tools/downloads
fi

# set the version number of the tools directory that is used in the Windows/macOS distros
if test -z "$TOOLS_VERSION"; then
  export TOOLS_VERSION=210713
fi

# use the default language in perl (supresses a lot of warnings in perl calls)
export LANG=C

# the directory where the distribution file will created
DISTDIR=out/dist

# the directory where the pre-built IDE files are present
IDE_BUILDDIR=out/ui/releng/org.omnetpp.ide.$what.product/target/products/org.omnetpp.ide.$what.product/ide

checkfile() {
    if [ ! -r $1 ]; then
        echo "file $1 not found -- $2"
        exit 1
    fi
}

checkfile configure.in 'Must be called in top-level omnetpp dir!'

if mount | grep textmode >/dev/null; then
        echo "Text-mode Cygwin drives won't do, use binary mounts!!!" 1>&2
        exit 1
fi

# Get version string and BUILD identifier
export VERSION=$(cat Version | sed 's/^.*-//')
if [ "$BUILDID" = "" ]; then
  # generate our own build identifier
  export BUILDID=$(date +%y%m%d)-$(git describe --tags | awk -F '-g' '{print $2;}')
fi

RELEASE="$what-$VERSION"

echo $RELEASE >Version

# do some edition specific preprocessing
. $OMNETPP_ROOT/releng/makedist-${what}.sh

# tweak the version and buildid
$TWEAKCONFIG set configure.in    OMNETPP_PRODUCT "\"$WHAT\"" || exit 1
$TWEAKCONFIG set configure.in    OMNETPP_EDITION "\"$EDITION\"" || exit 1
$TWEAKCONFIG set configure.in    OMNETPP_BUILDID "\"$BUILDID\"" || exit 1
$TWEAKCONFIG set configure       OMNETPP_PRODUCT "\"$WHAT\"" || exit 1
$TWEAKCONFIG set configure       OMNETPP_EDITION "\"$EDITION\"" || exit 1
$TWEAKCONFIG set configure       OMNETPP_BUILDID "\"$BUILDID\"" || exit 1

# check if configure.user settings are to our taste (just needed to build the documentation so Qtenv is turend off)
$TWEAKCONFIG set configure.user WITH_NETBUILDER yes || exit 1
$TWEAKCONFIG set configure.user WITH_PARSIM yes || exit 1
$TWEAKCONFIG set configure.user WITH_QTENV no || exit 1
$TWEAKCONFIG set configure.user WITH_OSG no || exit 1

# set vars for documentation
$TWEAKCONFIG set doc/src/api.doxyfile    PROJECT_NUMBER $VERSION || exit 1
$TWEAKCONFIG set doc/src/nedxml.doxyfile PROJECT_NUMBER $VERSION || exit 1
$TWEAKCONFIG set doc/src/parsim.doxyfile PROJECT_NUMBER $VERSION || exit 1
$TWEAKCONFIG set doc/src/scave.doxyfile  PROJECT_NUMBER $VERSION || exit 1
$TWEAKCONFIG set doc/src/manual/Makefile TEMPLATE $what || exit 1
$TWEAKCONFIG set doc/src/manual/Makefile VERSION $VERSION || exit 1

echo "Preparing to build $WHAT, version: $VERSION, build: $BUILDID, edition: $EDITION..."
echo "Core build: $BUILD_CORE_DISTRO"
echo "Linux x86_64 build: $BUILD_LINUX_X86_64_DISTRO"
echo "Windows x86_64 build: $BUILD_WIN32_X86_64_DISTRO"
echo "macOS build: $BUILD_MACOSX_DISTRO"

if [ -d $DISTDIR/$what-$VERSION ]; then
    echo "Deleting old target directory: $DISTDIR/$what-$VERSION !"
    rm -rf $DISTDIR/$what-$VERSION
fi

grep 'OMNETPP_VERSION' include/omnetpp/simkerneldefs.h
echo

# create Makefile.inc
./configure || { echo --- error during running configure ---; exit 1;}

# Generating documentation
if [ "$BUILD_DOC" = "true" ]; then
  echo Generating documentation
  (cd doc/src && make clean)
  make doc || { echo --- error generating documentation ---; exit 1;}
  if [ "$BUILD_IDE" = "true" ]; then
    echo --- Copying documatation to the IDE doc plugin
    make copy-ui-doc || { echo --- error copyig documentation ---; exit 1;}
  fi
fi

# create the ide package
if [ "$BUILD_IDE" = "true" ]; then
  if [ "$BUILD_IDE_NATIVE" = "true" ]; then
    echo --- Building native parts of the IDE ---
    $OMNETPP_ROOT/releng/ide/native/build-ide-native || { echo --- error during compiling native IDE parts ---; exit 1;}
  fi

  # re-create Makefile.inc becuase the native build proc has overwritten it
  ./configure || { echo --- error during running configure ---; exit 1;}

  echo --- Building java parts of the IDE
  $OMNETPP_ROOT/releng/ide/java/build-ide-java || { echo --- error during building the IDE component ---; exit 1;}
fi

make utils

echo "Copying version controlled files to $DISTDIR/$what-$VERSION"
# create distributin dir
mkdir -p $DISTDIR/$what-$VERSION

# add new files to the index created by the patching
git add -f configure.user
# add the changed files created by the patching to the index (to allow exporting the changed files)
git add -u .
# export the changed tree (i.e. the current working tree)
git checkout-index -a -f --prefix=$DISTDIR/$what-$VERSION/
# remove changes from the index (but keep them as local modifications i.e. no --hard)
git reset

###############################
# copy the generated documentation
if [ "$BUILD_DOC" = "true" ]; then

  echo Copying generated documentation

  checkfile doc/SimulationManual.pdf               'SimulationManual.pdf must exist in doc/'
  checkfile doc/UserGuide.pdf            'UserGuide.pdf must exist in doc/'
  checkfile doc/IDE-CustomizationGuide.pdf      'IDE-CustomizationGuide.pdf must exist in doc/'
  checkfile doc/IDE-DevelopersGuide.pdf      'IDE-DevelopersGuide.pdf must exist in doc/'
  checkfile doc/InstallGuide.pdf    'InstallGuide.pdf must exist in doc/'

  cp -r doc/api $DISTDIR/$what-$VERSION/doc/api
  cp -r doc/parsim-api $DISTDIR/$what-$VERSION/doc/parsim-api
  cp -r doc/nedxml-api $DISTDIR/$what-$VERSION/doc/nedxml-api
  cp -r doc/manual $DISTDIR/$what-$VERSION/doc/manual
  cp -r doc/installguide $DISTDIR/$what-$VERSION/doc/guide
  cp -r doc/userguide $DISTDIR/$what-$VERSION/doc/userguide
  cp -r doc/ide-developersguide $DISTDIR/$what-$VERSION/doc/ide-developersguide
  cp -r doc/ide-customization-guide $DISTDIR/$what-$VERSION/doc/ide-customization-guide
  cp doc/SimulationManual.pdf $DISTDIR/$what-$VERSION/doc
  cp doc/InstallGuide.pdf $DISTDIR/$what-$VERSION/doc
  cp doc/UserGuide.pdf $DISTDIR/$what-$VERSION/doc
  cp doc/IDE-CustomizationGuide.pdf $DISTDIR/$what-$VERSION/doc
  cp doc/IDE-DevelopersGuide.pdf $DISTDIR/$what-$VERSION/doc
  cp doc/IDE-Overview.pdf $DISTDIR/$what-$VERSION/doc
  cp ui/ChangeLog $DISTDIR/$what-$VERSION/doc/IDE-Changes
fi

###############################
# copy the "ide" directory
if [ "$BUILD_IDE" = "true" ]; then

  if [ ! -d $IDE_BUILDDIR/plugins ]; then
      echo The IDE component must be built and present in $IDE_BUILDDIR before creating a distribution.
      exit 1
  fi

  echo "Copying multiplatform IDE"
  cp -a $IDE_BUILDDIR $DISTDIR/$what-$VERSION

  # copy IDE icon
  cp releng/icon.png $DISTDIR/$what-$VERSION/ide

  # create update site repository archive
  export IDE_REPOSIRORY_NAME=${BUILDID}-$what-${VERSION}-ide-repository.zip
  if [ -d $IDE_BUILDDIR/../update ]; then
    zip -r -X -9 -q $DISTDIR/$IDE_REPOSITORY_NAME $IDE_BUILDDIR/../update || { echo --- error creating src-windows.zip ---; exit 1;}
  fi
fi

###############################
if [ "$BUILD_WIN32_X86_64_DISTRO" = "true" ]; then
  echo "Checking Win32 x86_64 version..."
  # check if the opplibs native lib is in place and correctly built
  OPPLIBSFILE=$(echo $DISTDIR/$what-$VERSION/ide/win32-x86_64/plugins/org.omnetpp.ide.nativelibs.win32.x86_64_?.?.?.*/opplibs.dll)
  if [ ! -f "$OPPLIBSFILE" ]; then
    echo $OPPLIBSFILE does not exsist
    exit 1
  fi
  #checkfile $OPPLIBSFILE 'opplibs.dll for win32 x86_64 must be present'
  OPPLIBSCONTENT=$(strings $OPPLIBSFILE | grep common..dll)
  if [ "$OPPLIBSCONTENT" != "" ]; then
    echo "opplibs.dll must be built statically. Run 'make MODE=release SHARED_LIBS=no ui'"
    exit 1
  fi
fi

#########################################
if [ "$BUILD_LINUX_X86_64_DISTRO" = "true" ]; then
  echo "Checking Linux x86_64 version..."
  # check if the opplibs native lib is in place and correctly built
  OPPLIBSFILE=$(echo $DISTDIR/$what-$VERSION/ide/linux-x86_64/plugins/org.omnetpp.ide.nativelibs.linux.x86_64_?.?.?.*/libopplibs.so)
  if [ ! -f "$OPPLIBSFILE" ]; then
    echo $OPPLIBSFILE does not exsist
    exit 1
  fi
  #checkfile $OPPLIBSFILE 'libopplibs.so for Linux_x86_64 must be present'
  OPPLIBSCONTENT=$(strings $OPPLIBSFILE | grep libcommon..so)
  if [ "$OPPLIBSCONTENT" != "" ]; then
    echo "libopplibs.so must be built statically. Run 'make MODE=release SHARED_LIBS=no ui'"
    exit 1
  fi
  # TODO check if it is a release build
fi

#########################################
if [ "$BUILD_MACOSX_DISTRO" = "true" ]; then
  echo "Checking macOS version..."
  # check if the opplibs native lib is in place and correctly built
  OPPLIBSFILE=$(echo $DISTDIR/$what-$VERSION/ide/macosx-x86_64/Eclipse.app/Contents/Eclipse/plugins/org.omnetpp.ide.nativelibs.macosx_?.?.?.*/libopplibs.jnilib)
  if [ ! -f "$OPPLIBSFILE" ]; then
    echo $OPPLIBSFILE does not exsist
    exit 1
  fi
  #checkfile $OPPLIBSFILE 'libopplibs.jnilib for macOS must be present'
  OPPLIBSCONTENT=$(strings $OPPLIBSFILE | grep libcommon..so)
  if [ "$OPPLIBSCONTENT" != "" ]; then
    echo "libopplibs.so must be built statically. Run 'make MODE=release SHARED_LIBS=no ui'"
    exit 1
  fi
  # TODO check if it is a release build
fi

# switch to the distribution dir and process the files there
cd $DISTDIR/$what-$VERSION || exit 1

# create the initial version of configure.user files from the *.dist templates
mv configure.user.dist configure.user

# create an empty bin and lib directory because git does not store empty dirs
mkdir bin
mkdir lib

# extracting sample data to OSG samples
echo "Extracting osg-samples-data archive..."
tar xfz $TOOLS_DIR/$TOOLS_VERSION/all/osg-samples-data.tar.gz --directory samples || { echo --- error extracting osg-samples-data.tar.gz ---; exit 1;}

# cleanup: remove the ui and other unnecessary directories
echo Removing unnecessary code: IDE source, petrinet, images source, releng etc.
rm -rf .github .vscode doc/src images/src releng ui misc/petrinets

unneededfiles=$(find . -name '.gitignore')
if [ "$unneededfiles" != "" ]; then
    echo "Removing files not needed in distribution: $unneededfiles"
    rm $unneededfiles
fi

cd ..
# pack and create tar.gz archives
# sleep/sync hack to avoid tar errors about changed files: http://www.mail-archive.com/bug-tar@gnu.org/msg01456.html
sleep 5
sync
export SOURCE_DISTRIBUTION_BASE_NAME=${BUILDID}-$what-${VERSION}
export SOURCE_DISTRIBUTION_NAME=$SOURCE_DISTRIBUTION_BASE_NAME.tgz
echo Creating $DISTDIR/$SOURCE_DISTRIBUTION_NAME
tar cfz $SOURCE_DISTRIBUTION_NAME $what-$VERSION || { echo --- error creating ...src.tgz ---; exit 1;}

###################################
# build platform specific packages

if [ "$BUILD_CORE_DISTRO" = "true" ]; then
  echo "Creating Core (platform independent) distro..."
  $OMNETPP_ROOT/releng/makedist-core
fi

if [ "$BUILD_LINUX_X86_64_DISTRO" = "true" ]; then
  echo "Creating Linux x86_64 distro..."
  $OMNETPP_ROOT/releng/makedist-linux.x86_64
fi

if [ "$BUILD_WIN32_X86_64_DISTRO" = "true" ]; then
  echo "Creating Windows x86_64 distro..."
  $OMNETPP_ROOT/releng/makedist-win32.x86_64
fi

if [ "$BUILD_MACOSX_DISTRO" = "true" ]; then
  echo "Creating macOS distro..."
  $OMNETPP_ROOT/releng/makedist-macos.x86_64
fi

# delete the source stuff
rm -rf $what-$VERSION
